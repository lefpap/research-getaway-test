---
import { ViewTransitions } from "astro:transitions";
import { Navbar } from "@/components/blocks/Navbar/index";
import "@/styles/base.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
const { pathname } = Astro.url;

const TITLE = pathname === "/" ? title : `Astro | ${title}`;

const navLinks = [
  {
    title: "Articles",
    href: "/posts/articles",
  },
  {
    title: "Projects",
    href: "/posts/projects",
  },
  {
    title: "Publications",
    href: "/posts/publications",
  },
  {
    title: "Contact",
    href: "/contact",
  },
];
---

<script is:inline>
  function setThemeMode(document) {
    const isBrowser = typeof localStorage !== "undefined";

    const getThemePreference = () => {
      if (isBrowser && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };

    if (isBrowser) {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }

    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  }

  setThemeMode(document);

  document.addEventListener("astro:before-swap", (ev) => {
    // Pass the incoming document to set the theme on it
    setThemeMode(ev.newDocument);
  });
</script>

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{TITLE}</title>
    <ViewTransitions />
  </head>
  <body>
    <Navbar navLinks={navLinks} client:only="react" />
    <slot />
  </body>
</html>
